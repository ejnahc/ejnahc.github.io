<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blog.chan.je</title>
    <description>Here is personal blog by Chanje Park, aka ejnahc, founder of EJN.
</description>
    <link>http://blog.chan.je/</link>
    <atom:link href="http://blog.chan.je/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 10 Dec 2017 19:04:29 +0900</pubDate>
    <lastBuildDate>Sun, 10 Dec 2017 19:04:29 +0900</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Socket.io with Elastic Beanstalk</title>
        <description>&lt;p&gt;Elastic Beanstalk을 이용하여 Socket.io 서버 운영 시, 제대로 연결이 안 되거나 wss를 타지 못해 xhr polling으로 대체되는 문제가 생길 수 있는데, 이 때 이렇게 하면 된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.ebextension/socketupgrade.config&lt;/code&gt; 파일에 다음과 같이 추가&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-plain&quot; data-lang=&quot;plain&quot;&gt;container_commands:
  enable_websockets:
    command: |
     sed -i '/\s*proxy_set_header\s*Connection/c \
              proxy_set_header Upgrade $http_upgrade;\
              proxy_set_header Connection &quot;upgrade&quot;;\
      ' /tmp/deployment/config/#etc#nginx#conf.d#00_elastic_beanstalk_proxy.conf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;Elastic Beanstalk에 물려 있는 Classic Load Balancer의 Listener 설정을 아래와 같이 변경한다.
&lt;img src=&quot;/images/20171210/alb_listener_setting.png&quot; alt=&quot;캡쳐 4&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;웹소켓이 정상적으로 물리는 것을 확인할 수 있다.&lt;/p&gt;
</description>
        <pubDate>Sun, 10 Dec 2017 19:00:00 +0900</pubDate>
        <link>http://blog.chan.je/programming/aws/2017/12/10/socket-io-with-elastic-beanstalk.html</link>
        <guid isPermaLink="true">http://blog.chan.je/programming/aws/2017/12/10/socket-io-with-elastic-beanstalk.html</guid>
        
        
        <category>programming</category>
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>CloudFront + S3 에서 307 Error 해결하기</title>
        <description>&lt;p&gt;S3에 Asset들을 올려놓고 CloudFront를 이용하여 Serving 하게끔 설정해 두었는데, XXXXXX.s3.ap-northeast-2.amazonaws.com 와 같은 URL로 리다이렉트 되면서 제대로 표시되지 않을 수 있고, 이 때 307 redirect 코드가 뜨는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;해결 방법은 그냥 &lt;strong&gt;기다리면 된다&lt;/strong&gt;. 보통 이런 경우 S3 bucket과 CloudFront를 갓 만든 경우인데, 모든 edge에 배포되는데 시간이 걸리기 때문에 정상적으로 리다이렉트 되지 않는 경우가 생긴다. 아무리 길어도 3시간 내지 1일 안에는 해결되므로 기다리면 됨.&lt;/p&gt;

&lt;p&gt;만약 그 사이에 CloudFront 도메인에 접속하였다면 307 redirect 결과가 캐싱되어버려 추후 배포되었음에도 똑같은 오류가 발생할 수 있는데, 이 때 CloudFront 콘솔의 Invalidation 탭에 들어가 해당 URL을 갱신해 주면 됨.&lt;/p&gt;

&lt;p&gt;셋팅할때마다 긴가민가 해서 기억 저장 겸 보관해둔다. 추석 기념 포스팅!&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Oct 2017 18:00:00 +0900</pubDate>
        <link>http://blog.chan.je/programming/aws/2017/10/05/cloudfront-s3-307-error.html</link>
        <guid isPermaLink="true">http://blog.chan.je/programming/aws/2017/10/05/cloudfront-s3-307-error.html</guid>
        
        
        <category>programming</category>
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Socket.io with AWS ALB</title>
        <description>&lt;p&gt;요즘 &lt;a href=&quot;https://aws.amazon.com&quot;&gt;AWS&lt;/a&gt;로 이전하고 있는 프로젝트가 있는데, $$$가 들긴 하지만 진작 쓸 걸 하는 생각을 하고 있다. 다른 것들은 자습서나 문서들이 잘 되어 있어 적용에 크게 어려움이 없었으나, 여러 개의 socket.io를 돌리고 있는 ec2 instance를 만들어 이를 로드밸런싱 하는 과정에서 - 즉, &lt;a href=&quot;http://socket.io&quot;&gt;Socket.io&lt;/a&gt;에다 &lt;a href=&quot;https://aws.amazon.com/ko/elasticloadbalancing/&quot;&gt;Elastic Load Balancing(ELB)&lt;/a&gt;를 물리는 부분에서 많은 삽질을 했다. 이후에는 같은 삽질을 하지 않았으면 하는 바람에서 적어둔다.&lt;/p&gt;

&lt;p&gt;이 문서는 &lt;a href=&quot;http://uorat.hatenablog.com/entry/2016/09/26/070000&quot;&gt;WebSocket対応した噂のALB (Application Load Balancer) を試してみた&lt;/a&gt;를 참고하여 쓴 것이며, 보다 자세한 내용을 원한다면 클릭해 보자.&lt;/p&gt;

&lt;h2 id=&quot;elb의-장점&quot;&gt;ELB의 장점&lt;/h2&gt;
&lt;p&gt;기본적인 목적은 부하, 트래픽 분산이다. 여기에 추가로:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;돌아가던 서버가 죽더라도 다른 곳으로 라우팅을 하여 장애 시간을 줄일 수 있음&lt;/li&gt;
  &lt;li&gt;Multi-AZ로 구성해 두면 특정 AZ의 장애가 발생하더라도 보다 유연하게 대처할 수 있음&lt;/li&gt;
  &lt;li&gt;ELB에 물린 DNS name을 CNAME으로 도메인에 물려두면 인스턴스가 추가/삭제 되더라도 그에 맞추어 따로 IP 작업을 하지 않아도 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;application-작업&quot;&gt;Application 작업&lt;/h2&gt;
&lt;p&gt;Socket.io Application에 추가로 해야 할 작업은 &lt;a href=&quot;https://github.com/socketio/socket.io-redis&quot;&gt;socket.io-redis&lt;/a&gt;를 달아 pub/sub가 가능하게끔 하면 된다. 각각의 instance에서 emit 하는 이벤트들이 다른 instance에도 갈 수 있게끔 해주고, 더 나아가 session control도 가능해진다.&lt;/p&gt;

&lt;h2 id=&quot;겪었던-문제들&quot;&gt;겪었던 문제들&lt;/h2&gt;
&lt;p&gt;내가 겪은 가장 큰 문제는 간헐적으로 HTTP 상태 코드가 400 Bad Request를 뿜는 오류였고, “Session ID Unknown”가 오류 메시지였는데, 이 문제는 로드 밸런싱을 하면서 다른 Instance에 접속했을 때 이전 세션 ID를 이용하지 않은 상태에서 접속하여 발생하는 오류로, AWS에서 만들어 둔 Sticky session (고정 세션) 을 해결하면 간단히 해결된다.&lt;/p&gt;

&lt;p&gt;또 Nginx proxy 등이 제대로 붙지 않는 오류가 있는데, 삽질을 아주 잘 한다면 이대로 사용해도 괜찮겠지만 앞으로 소개할 ALB를 이용하면 Nginx proxy 등을 만들지 않아도 쉽게 해결할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;application-load-balancer-alb&quot;&gt;Application Load Balancer (ALB)&lt;/h2&gt;
&lt;p&gt;기존의 Classic Load Balancer가 TCP 등의 좀 더 로우 레벨에서 돌아가는 로드 밸런서라면, ALB는 HTTP/HTTPS 어플리케이션 레이어 상에서 돌아가는 밸런서라 보면 된다. 대부분의 웹 어플리케이션에 적용하기에 큰 무리가 없어서 왠만해서는 그냥 이걸 사용하면 된다. 기존의 로드 밸런서에서는 Instance를 직접 관리하는데, ALB에서는 Target Group을 만들어 관리한다.&lt;/p&gt;

&lt;h2 id=&quot;make-target-group&quot;&gt;Make Target Group&lt;/h2&gt;
&lt;p&gt;참고: &lt;a href=&quot;http://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/application/load-balancer-target-groups.html&quot;&gt;AWS Docs&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Protocol: HTTP&lt;/li&gt;
  &lt;li&gt;Port: 3000 (Application port)&lt;/li&gt;
  &lt;li&gt;Health check는 Protocol HTTP, Path /socket.io/socket.io.js 로&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;생성한 다음 매우 중요한 부분이 있는데&lt;/strong&gt;, 생성한 Target Group에서 오른쪽 클릭 후 Edit Attributes를 눌러 Stickiness 옵션에 &lt;strong&gt;Enable load balancer generated cookie stickiness&lt;/strong&gt; 를 선택해 주면 Sticky session이 활성화 되며 위에서 언급한 400 오류가 뜨지 않게 된다. 사실 이 문단이 이 문서에서 가장 중요한 부분이자 이 글을 쓴 이유다.&lt;/p&gt;

&lt;h2 id=&quot;launch-alb&quot;&gt;Launch ALB&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Listen Protocol: HTTP, HTTPS (포트 그대로)&lt;/li&gt;
  &lt;li&gt;HTTPS를 사용하는 경우 인증서를 선택해 준다.&lt;/li&gt;
  &lt;li&gt;AZ는 각각 다른 AZ 2개를 선택 후, 해당 AZ 내 Public Subnet을 하나씩 선택해 준다.&lt;/li&gt;
  &lt;li&gt;Target Group에 아까 생성한 Target Group을 지정.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;나머지는 적절히 지정해 준 다음 생성된 로드 밸런서의 CNAME으로 도메인을 지정해 주고 잠시 후 접속이 제대로 되는지 확인해 보면 된다.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Jan 2017 02:30:00 +0900</pubDate>
        <link>http://blog.chan.je/programming/aws/2017/01/30/socket-io-with-aws-alb.html</link>
        <guid isPermaLink="true">http://blog.chan.je/programming/aws/2017/01/30/socket-io-with-aws-alb.html</guid>
        
        
        <category>programming</category>
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>실전 압축 Django</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://pythonstudy.xyz/python/django&quot;&gt;예제로 배우는 Python 프로그래밍&lt;/a&gt;을 보고 따라해 봤는데 어느정도 기초 알기에는 많은 도움이 된 거 같다. 순서대로 따라 하면 될 거 같고 빠른 적응을 위해 나에게 필요한 부분만 메모해 두었으며, 중간중간에 추가로 필요한 내용을 메모할 예정&lt;/p&gt;

&lt;h2 id=&quot;quickstart&quot;&gt;Quickstart&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;pip install django
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;django-admin startproject myweb
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myweb &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./manage.py runserver 0.0.0.0:5000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;app&quot;&gt;App&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;한 프로젝트에 여러 개의 App이 있을 수 있다.&lt;/li&gt;
  &lt;li&gt;App은 모듈화할 수 있고 여러 프로젝트에서 재사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./manage.py startapp home&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이후, &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt; INSTALLED_APPS 리스트에 &lt;code class=&quot;highlighter-rouge&quot;&gt;'home'&lt;/code&gt; 을 추가한다. 이후 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt; 파일에 있는에 &lt;code class=&quot;highlighter-rouge&quot;&gt;urlpatterns&lt;/code&gt; 에 URL 패턴을 추가하면 App으로 접속할 수 있게 된다.&lt;/p&gt;

&lt;h2 id=&quot;view&quot;&gt;View&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;View는 MVC에서의 Controller와 비슷한 기능을 한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;views.py&lt;/code&gt; 파일에 정의한다.&lt;/li&gt;
  &lt;li&gt;Django에서는 MTV인데 MVC와의 차이는 View → Template, Controller → View로 변경됨.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.http&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'My Message'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'index.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;template&quot;&gt;Template&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Template은 CodeIgniter에서의 View를 정하는 HTML 파일이다. 각각의 Django App 폴더 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;templates&lt;/code&gt; 폴더를 만든 후 이 안에 템플릿 파일들을 정의한다.&lt;/li&gt;
  &lt;li&gt;여러 템플릿 엔진을 쓸 수 있으며 기본 템플릿 엔진은 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt; 파일에 &lt;code class=&quot;highlighter-rouge&quot;&gt;TEMPLATES&lt;/code&gt; 섹션에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;BACKEND&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.template.backends.django.DjangoTemplates&lt;/code&gt;로 설정&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;extends&lt;/code&gt; 와 &lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt; 을 이용하면 include 기능을 활용할 수 있다. header, footer의 개념이라 보면 될 듯.&lt;/li&gt;
  &lt;li&gt;아래는 기본적인 Django 템플릿 언어 (Template Language)를 다룬 것들이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Title&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{message}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;
      Name : {{ name }}
      Type : {{ vip.key }}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
    {% if count &amp;gt; 0 %}
        Data Count = {{ count }}
    {% else %}
        No Data
    {% endif %}
     
    {% for item in dataList %}
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;{{ item.name }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    {% endfor %}
     
    {% csrf_token %}
    
    {# 날짜 포맷 지정 #}
    {{ createDate|date:&quot;Y-m-d&quot; }}
     
    {# 소문자로 변경 #}
    {{ lastName|lower }}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;model&quot;&gt;Model&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;models.py&lt;/code&gt; 에 정의한다. 여러 개의 모델 클래스 정의가 가능하며, 1개의 모델은 데이터베이스에서 1개의 테이블에 해당한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Feedback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmailField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;createDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTimeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__unicode__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;필드-타입&quot;&gt;필드 타입&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;필드 타입&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;CharField&lt;/td&gt;
      &lt;td&gt;제한된 문자열 필드 타입. 최대 길이를 &lt;code class=&quot;highlighter-rouge&quot;&gt;max_length&lt;/code&gt; 옵션에 지정해야 한다. 문자열의 특별한 용도에 따라 &lt;code class=&quot;highlighter-rouge&quot;&gt;CharField&lt;/code&gt;의 파생클래스로서, 이메일 주소를 체크를 하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;EmailField&lt;/code&gt;, IP 주소를 체크를 하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;GenericIPAddressField&lt;/code&gt;, 콤마로 정수를 분리한 &lt;code class=&quot;highlighter-rouge&quot;&gt;CommaSeparatedIntegerField&lt;/code&gt;, 특정 폴더의 파일 패스를 표현하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;FilePathField&lt;/code&gt;, URL을 표현하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;URLField&lt;/code&gt; 등이 있다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TextField&lt;/td&gt;
      &lt;td&gt;대용량 문자열을 갖는 필드&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IntegerField&lt;/td&gt;
      &lt;td&gt;32 비트 정수형 필드. 정수 사이즈에 따라 &lt;code class=&quot;highlighter-rouge&quot;&gt;BigIntegerField&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SmallIntegerField&lt;/code&gt; 을 사용할 수도 있다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BooleanField&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; 필드. &lt;code class=&quot;highlighter-rouge&quot;&gt;Null&lt;/code&gt; 을 허용하기 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;NullBooleanField&lt;/code&gt;를 사용한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DateTimeField&lt;/td&gt;
      &lt;td&gt;날짜와 시간을 갖는 필드. 날짜만 가질 경우는 &lt;code class=&quot;highlighter-rouge&quot;&gt;DateField&lt;/code&gt;, 시간만 가질 경우는 &lt;code class=&quot;highlighter-rouge&quot;&gt;TimeField&lt;/code&gt;를 사용한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DecimalField&lt;/td&gt;
      &lt;td&gt;소숫점을 갖는 &lt;code class=&quot;highlighter-rouge&quot;&gt;decimal&lt;/code&gt; 필드&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BinaryField&lt;/td&gt;
      &lt;td&gt;바이너리 데이타를 저장하는 필드&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FileField&lt;/td&gt;
      &lt;td&gt;파일 업로드 필드&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ImageField&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FileField&lt;/code&gt;의 파생클래스로서 이미지 파일인지 체크한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UUIDField&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GUID (UUID)&lt;/code&gt;를 저장하는 필드&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;필드-간-관계-relationship&quot;&gt;필드 간 관계 (Relationship)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKey&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ManyToManyField&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OneToOneField&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;더 자세한 정보는 &lt;a href=&quot;https://docs.djangoproject.com/en/1.10/ref/models/fields/&quot;&gt;Django Docs: Model field reference&lt;/a&gt;를 확인한다.&lt;/p&gt;

&lt;h3 id=&quot;필드-옵션&quot;&gt;필드 옵션&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;필드 옵션&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;null (&lt;code class=&quot;highlighter-rouge&quot;&gt;Field.null&lt;/code&gt;)&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;null=True&lt;/code&gt; 이면, Empty 값을 DB에 &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt;로 저장한다. DB에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Null&lt;/code&gt;이 허용된다. 예: &lt;code class=&quot;highlighter-rouge&quot;&gt;models.IntegerField(null=True)&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;blank (&lt;code class=&quot;highlighter-rouge&quot;&gt;Field.blank&lt;/code&gt;)&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;blank=False&lt;/code&gt; 이면, 필드가 Required 필드이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;blank=True&lt;/code&gt; 이면, Optional 필드이다. 예: &lt;code class=&quot;highlighter-rouge&quot;&gt;models.DateTimeField(blank=True)&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;primary_key (&lt;code class=&quot;highlighter-rouge&quot;&gt;Field.primary_key&lt;/code&gt;)&lt;/td&gt;
      &lt;td&gt;해당 필드가 Primary Key임을 표시한다. 예: &lt;code class=&quot;highlighter-rouge&quot;&gt;models.CharField(max_length=10, primary_key=True)&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;unique (&lt;code class=&quot;highlighter-rouge&quot;&gt;Field.unique&lt;/code&gt;)&lt;/td&gt;
      &lt;td&gt;해당 필드가 테이블에서 Unique함을 표시한다. 해당 컬럼에 대해 Unique Index를 생성한다. 예: &lt;code class=&quot;highlighter-rouge&quot;&gt;models.IntegerField(unique=True)&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;default (&lt;code class=&quot;highlighter-rouge&quot;&gt;Field.default&lt;/code&gt;)&lt;/td&gt;
      &lt;td&gt;필드의 디폴트값을 지정한다. 예: &lt;code class=&quot;highlighter-rouge&quot;&gt;models.CharField(max_length=2, default=&quot;WA&quot;)&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;db_column (&lt;code class=&quot;highlighter-rouge&quot;&gt;Field.db_column&lt;/code&gt;)&lt;/td&gt;
      &lt;td&gt;컬럼명은 디폴트로 필드명을 사용하는데, 만약 다르게 쓸 경우 지정한다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;db-migration&quot;&gt;DB Migration&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt; 파일 안의 &lt;code class=&quot;highlighter-rouge&quot;&gt;INSTALLED_APPS&lt;/code&gt; 리스트 안에 App 이름을 추가한다.&lt;/li&gt;
  &lt;li&gt;테이블 스키마가 추가/수정된 경우 아래 명령어를 이용하여 실 DB에 적용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./manage.py makemigrations
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./manage.py migrate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;App명_ModelClass명&lt;/code&gt;의 형식으로 데이터베이스가 생성된다.&lt;/li&gt;
  &lt;li&gt;DB 관리를 하기 위해서 아래 명령어를 입력한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./manage.py dbshell&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;MySQL의 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt; 에서 아래와 같이 변수 설정한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;DATABASES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'ENGINE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'django.db.backends.mysql'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'NAME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'MyDB'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'user1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'PASSWORD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'pwd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'PORT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'3306'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;model-api&quot;&gt;Model API&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;feedback.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# INSERT&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feedback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Kim'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'kim@test.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Hi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feedback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;' : '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# GET&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feedback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feedback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Kim'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feedback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Kim'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feedback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feedback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-createData'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feedback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distinct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feedback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feedback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feedback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Kim'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'-id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# UPDATE&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feedback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Park'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# DELETE&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feedback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;url-mapping&quot;&gt;URL Mapping&lt;/h2&gt;
&lt;p&gt;Project 메인 URL 파일 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt; 에 정의하며 아래와 같이 프로젝트마다 매핑을 걸어줄 수 있다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# urls.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conf.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'^feedback/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'feedback.urls'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'^home/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'home.urls'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# home/urls.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conf.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;home&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# app_name = 'test' -&amp;gt; url 'test:list' ...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'^list'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'list'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'^create'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'create'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'^edit/(?P&amp;lt;id&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d+)/$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'edit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alias 같은 개념이 있는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;name='list'&lt;/code&gt; 로 정의하여 템플릿에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a href=&quot;{% url 'list' %}&quot;&amp;gt;&lt;/code&gt;와 같이 응용할 수 있다. 더 자세한 정보는 &lt;a href=&quot;https://docs.djangoproject.com/en/1.10/topics/http/urls/&quot;&gt;Django Docs: URL dispatcher&lt;/a&gt;를 확인한다.&lt;/p&gt;

&lt;h2 id=&quot;form&quot;&gt;Form&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;forms.py&lt;/code&gt; 에 정의한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.forms&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelForm&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feedback&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FeedbackFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feedback&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'comment'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;views.py&lt;/code&gt; 에 다음과 같이 Form handling을 할 수 있다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.forms&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FeedbackFrom&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FeedbackFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/feedback/list'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FeedbackFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'feedback.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'form'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;템플릿을 아래와 같이 정의하여 Form을 만들 수 있다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% extends &quot;base.html&quot; %}

{% block content %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{% url 'list' %}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Goto Feedback List&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            {% csrf_token %}
            {{ form.as_p }}
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;저장&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

{% endblock content %}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;static-file&quot;&gt;Static File&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BASE_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;static&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;STATICFILES_FINDERS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.staticfiles.finders.FileSystemFinder'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django.contrib.staticfiles.finders.AppDirectoriesFinder'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;static 파일 사용은 아래와 같이 한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% load staticfiles %}

&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{% static 'bootstrap/css/bootstrap.min.css' %}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Deploy 시 static 파일을 모아 특정 디렉토리로 옮길 수 있으며 이 작업을 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;collectstatic&lt;/code&gt; 명령을 사용한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./manage.py collectstatic&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;site-deployment---using-nginx--uwsgi&quot;&gt;Site Deployment - using Nginx + uWSGI&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html&quot;&gt;Django and nginx&lt;/a&gt; 문서를 참고한다.&lt;/p&gt;

&lt;p&gt;우선 uwsgi를 root에 설치한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo pip install uwsgi&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위 파일을 &lt;code class=&quot;highlighter-rouge&quot;&gt;uwsgi.ini&lt;/code&gt; 로 저장한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-plain&quot; data-lang=&quot;plain&quot;&gt;[uwsgi]

# Django-related settings
# the base directory (full path)
chdir           = /home/myweb
# Django's wsgi file
module          = myweb.wsgi
# the virtualenv (full path)
home            = /home/myweb/venv

# process-related settings
# master
master          = true
# maximum number of worker processes
processes       = 10
# the socket (use the full path to be safe
socket          = /tmp/myweb.sock
# ... with appropriate permissions - may be needed
chmod-socket    = 666
# clear environment on exit
vacuum          = true

safe-pidfile = /var/run/myweb.pid
uid = www-data
gid = www-data&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;아래 명령어로 정상 동작하는지 확인한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;uwsgi --ini uwsgi.ini&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;제대로 동작하는 경우, (systemd 에 적용)[http://uwsgi-docs.readthedocs.io/en/latest/Systemd.html]한다.&lt;/p&gt;

&lt;h3 id=&quot;pip-package&quot;&gt;Pip Package&lt;/h3&gt;
&lt;p&gt;Deploy 시 현재 사용중인 패키지를 아래와 같이 저장, 설치할 수 있다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;pip install -r requirements.txt
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;plugin-debug_toolbar&quot;&gt;Plugin: debug_toolbar&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip install django-debug-toolbar&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt; 파일에 아래와 같이 수정
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;INSTALLED_APPS&lt;/code&gt; 에 &lt;code class=&quot;highlighter-rouge&quot;&gt;debug_toolbar&lt;/code&gt; 추가&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MIDDLEWARE&lt;/code&gt; 에 &lt;code class=&quot;highlighter-rouge&quot;&gt;debug_toolbar.middleware.DebugToolbarMiddleware&lt;/code&gt; 추가&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;INTERNAL_IPS&lt;/code&gt; 에 접속한 IP 주소 추가&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;프로젝트 &lt;code class=&quot;highlighter-rouge&quot;&gt;urls.py&lt;/code&gt; 파일에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;urlpatterns&lt;/code&gt; 에 &lt;code class=&quot;highlighter-rouge&quot;&gt;import debug_toolbar&lt;/code&gt;,  &lt;code class=&quot;highlighter-rouge&quot;&gt;url(r'^__debug__/', include(debug_toolbar.urls))&lt;/code&gt; 추가&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 24 Dec 2016 23:00:00 +0900</pubDate>
        <link>http://blog.chan.je/programming/github/2016/12/24/parctical-compression-django.html</link>
        <guid isPermaLink="true">http://blog.chan.je/programming/github/2016/12/24/parctical-compression-django.html</guid>
        
        
        <category>programming</category>
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>오픈소스에 기여해 보기</title>
        <description>&lt;p&gt;하릴없이 인터넷 서핑 하며 시간만 축내다 &lt;a href=&quot;https://github.com/panzerdp/voca&quot;&gt;voca&lt;/a&gt;라는 라이브러리를 발견했다. 재밌어보이는데 하면서 둘러보다가 뭔가 오타를 발견해서 지금까지 내부적으로 쓰기만 했지 오픈소스에 기여한 적이 없어서 한번 간단히 기여해 보기로 했다. 사실 오타 1바이트 수정하는게 얼마나 오픈소스에 기여할지는 모르겠지만 ;p 연습이니까.&lt;/p&gt;

&lt;h2 id=&quot;fork-하기&quot;&gt;Fork 하기&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.axisj.com/archives/514&quot;&gt;github fork 에서 pull request 까지 그리고 merge&lt;/a&gt;를 참고하여 자신의 Repo에 Fork 한다. Fork 한 저장소를 가져온다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone git@github.com:ejnahc/voca.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;새로운-branch-만들기&quot;&gt;새로운 Branch 만들기&lt;/h2&gt;
&lt;p&gt;패치를 적용할 브랜치를 만든다. 브랜치 이름은 적당히 &lt;code class=&quot;highlighter-rouge&quot;&gt;patch-1&lt;/code&gt;로 지어 줬다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout -b patch-1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;변경-사항-commit-하기&quot;&gt;변경 사항 Commit 하기&lt;/h2&gt;
&lt;p&gt;변경 사항을 Commit 한다. &lt;a href=&quot;https://item4.github.io/2016-11-01/How-to-Write-a-Git-Commit-Message/&quot;&gt;Git 커밋 메시지 작성법&lt;/a&gt;을 참고하면 많은 도움이 된다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;Fix typo&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;자신의-repo에-패치-올리기&quot;&gt;자신의 repo에 패치 올리기&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;를 이용하여 패치를 올린다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git push --set-upstream origin patch-1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;pull-request-날리기&quot;&gt;Pull request 날리기&lt;/h2&gt;
&lt;p&gt;패치를 올리고 Github에 가 보면 &lt;strong&gt;Compare &amp;amp; pull request&lt;/strong&gt;가 생기는데 눌러준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20161223/capture1.png&quot; alt=&quot;캡쳐 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;어떤 점을 고쳤는지를 적어 준다. 영어로 적어야 해서 긴장되지만 정성스레 적어 준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20161223/capture2.png&quot; alt=&quot;캡쳐 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pull request가 만들어 지고 Travis CI가 PR된 코드의 테스트를 자동으로 진행하는 것을 확인할 수 있다. 테스트가 완료될 때까지 기다려 준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20161223/capture3.png&quot; alt=&quot;캡쳐 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;언제 테스트가 완료되나 기다리고 있었는데 주인장이 그냥 merge 해 줬다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20161223/capture4.png&quot; alt=&quot;캡쳐 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 맛에 오픈소스 기여 하는구나 싶다! 생각보다 쉬우니 오픈소스에 많이 도움을 줘야 겠다는 생각을 했다. 일단은 오타 위주로.. ㅋㅋ&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Dec 2016 23:16:00 +0900</pubDate>
        <link>http://blog.chan.je/programming/github/2016/12/23/contributing-to-open-source.html</link>
        <guid isPermaLink="true">http://blog.chan.je/programming/github/2016/12/23/contributing-to-open-source.html</guid>
        
        
        <category>programming</category>
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>Jekyll with Github Pages</title>
        <description>&lt;p&gt;일단 블로그 첫 글은 이 블로그를 돌리는 Jekyll을 어떻게 Github Pages를 이용하여 설치했는지에 대해 적어보고자 한다. 써보게 된 동기는… 요즘 이걸 많이 쓴다고 하길래 나도 따라 써 봄.&lt;/p&gt;

&lt;p&gt;Github Pages에서는 기본적으로 Jekyll을 설치하여 호스팅이 가능하지만 Paginate 등의 Plugin은 설치가 불가능하다. github-pages 라는 gem이 있지만 여기에서도 Paginate 플러그인은 설치되어 있지 않다. 따라서 &lt;strong&gt;local에서 직접 사이트를 build 한 다음, _site 폴더를 github page에 호스팅 하는 방법을 사용해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;사용중인 Ruby 버전은 2.3.3p222, Jekyll 버전은 3.3.1 이다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gem install jekyll bundler
jekyll new ejnahc.github.io
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ejnahc.github.io
bundle
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve --watch --host&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.0.0.0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이후 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://SITE:4000/&lt;/code&gt; 으로 접속하여 정상적으로 나오는지 확인한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; 에서 필요한 설정을 바꿀 수 있다.&lt;/p&gt;

&lt;p&gt;이후 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll build&lt;/code&gt;로 직접 build하거나, 또는 serve 켜놓고 파일을 바꾸게 되면 자동으로 build 해준다.&lt;/p&gt;

&lt;h2 id=&quot;스킨-씌우기&quot;&gt;스킨 씌우기&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org&quot;&gt;Jekyll Themes&lt;/a&gt;에 다양한 테마들이 있다. 마음에 드는 것을 고르면 된다. &lt;a href=&quot;http://jekyllthemes.org/themes/zetsu/&quot;&gt;Zetsu&lt;/a&gt;를 사용한다. &lt;a href=&quot;https://github.com/nandomoreirame/zetsu/archive/master.zip&quot;&gt;다운로드 링크&lt;/a&gt;를 눌러 다운받아서 루트에 덮어 씌운다.&lt;/p&gt;

&lt;p&gt;스킨마다 다르기 때문에 확실히 어떻게 해야 한다고 적을 수는 없지만 기존 파일들과 비교하여 눈치껏 잘 알아서 수정하면 된다. 그러기 귀찮으면 그냥 폴더 싹 날려버리고 스킨 폴더로 시작하는 것도 방법이다.&lt;/p&gt;

&lt;p&gt;위 스킨의 경우 새로운 gem을 설치해야 하는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;에 아래 두 줄을 추가한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rake&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sass&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이후 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; 로 추가된 gem을 설치한다.&lt;/p&gt;

&lt;h2 id=&quot;글-쓰기&quot;&gt;글 쓰기&lt;/h2&gt;
&lt;p&gt;글 쓰는 것은 _posts 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;시간-제목.md&lt;/code&gt; 로 작성하면 된다. 이미 샘플 문서 파일이 있을건데 파일 이름을 따라 지어주면 된다. 파일 이름은 중요하니 잘 따라 짓는게 좋다.&lt;/p&gt;

&lt;p&gt;글의 첫 부분에 아래와 같은 부분이 있는데 이걸 Front Matter이라 부른다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-plain&quot; data-lang=&quot;plain&quot;&gt;---
layout: post
title:  &quot;Jekyll with Github Pages&quot;
date:   2016-12-17 22:43:03 +0900
categories: programming jekyll
comments: true
---&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;여러 항목들에 대한 설명을 &lt;a href=&quot;https://jekyllrb.com/docs/frontmatter/&quot;&gt;여기&lt;/a&gt;에서 볼 수 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;published&lt;/code&gt; 라는 것도 있는데 false로 두면 표시되지 않게 하는 파라미터다.&lt;/p&gt;

&lt;p&gt;글 양식은 Markdown을 사용한다. 기본적인 사용 방법은 &lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot;&gt;Markdown Cheatsheet&lt;/a&gt;에서 확인한다.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-paginate-플러그인-설치&quot;&gt;jekyll-paginate 플러그인 설치&lt;/h2&gt;
&lt;p&gt;Gemfile 파일에서 아래에 다음과 같이 삽입&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# If you have any plugins, put them here!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:jekyll_plugins&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-feed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 0.6&quot;&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-paginate&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 새로 추가한다.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; 로 설치한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; 을 열어 아래 두 줄을 추가한다..&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-plain&quot; data-lang=&quot;plain&quot;&gt;paginate: 10
gems:
  - jekyll-paginate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;내가 위에서 쓰는 스킨에는 이미 paginate snippet이 있어 작업할 필요가 없지만 필요한 경우 pagination 부분을 스킨에 추가해야 한다. 예제 Snippet을 &lt;a href=&quot;https://jekyllrb.com/docs/pagination/&quot;&gt;여기&lt;/a&gt;에서 확인할 수 있다. 어떻게 적용하는지 모르겠으면 내가 적용한 스킨을 받아서 확인해 보면 된다.&lt;/p&gt;

&lt;p&gt;내 스킨은 오래되어서 경로가 잘못되어 있는데 이전, 다음 링크를 아래와 같이 변경한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;newer-posts&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;laquo;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;older-posts&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;raquo;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;disqus-댓글-달기&quot;&gt;Disqus 댓글 달기&lt;/h2&gt;
&lt;p&gt;스킨에 따라 다르지만 위의 스킨같은 경우에는 각 문서의 Front Matter에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;comments&lt;/code&gt; 변수를 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;로 설정해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://disqus.com&quot;&gt;Disqus&lt;/a&gt;에서 설치 페이지를 들어가서 댓글 위젯을 추가한 다음, &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/comments.html&lt;/code&gt; 에 있는 Disqus 소스를 아래와 같이 수정한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;disqus_thread&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disqus_config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{{ page.id | prepend: site.url }}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;identifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{{page.id}}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'script'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'//blog-chan-je.disqus.com/embed.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'data-timestamp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);})();&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;Please enable JavaScript to view the &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://disqus.com/?ref_noscript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;comments powered by Disqus.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;주소가 같으면 같은 댓글 주소가 보여지게 되는 경우가 있으니 스킨에 추가한 다음 &lt;code class=&quot;highlighter-rouge&quot;&gt;this.page.url&lt;/code&gt; 과 &lt;code class=&quot;highlighter-rouge&quot;&gt;this.page.identifier&lt;/code&gt; 가 제대로 설정되어 있는지를 확인한다.&lt;/p&gt;

&lt;h2 id=&quot;github-page에-올리기&quot;&gt;Github Page에 올리기&lt;/h2&gt;
&lt;p&gt;이정도면 Jekyll 설정은 다 된거 같다. Github Page에 올리는데 아까 말한것과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; 폴더를 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 브랜치로 설정하여 접속 시 보이게 하고 나머지 폴더들은 글 내용의 변동 사항 등을 저장해 두기 위해 역시나 repo에 올려둘려고 한다. 먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; 폴더부터 master 브랜치로 올린다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;_site
git init
git add --all
git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;first commit&quot;&lt;/span&gt;
git remote add origin git@github.com:ejnahc/ejnahc.github.io.git
git push -u origin master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;그 상위 폴더 또한 올리되, dev 브랜치를 만들어 올리기로 한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../
git init
git add --all
git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;first commit&quot;&lt;/span&gt;
git remote add origin git@github.com:ejnahc/ejnahc.github.io.git
git checkout -b dev
git branch -d master
git checkout dev
git push -u origin dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;둘 다 정상적으로 업로드 되었고 페이지가 제대로 나오는지 확인한다. 이제는 문서를 편집하거나 레이아웃을 수정하고 나서 둘 다 push 해서 올려주면 된다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&quot;Commit message: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;commit_msg

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/ejnahc.github.io &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git add --all &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$commit_msg&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;_site &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git add --all &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$commit_msg&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;따로 bash script으로 만들어 돌려도 되고 편하게 하면 될 것 같다. &lt;a href=&quot;https://github.com/ejnahc/ejnahc.github.io/blob/master/update.sh&quot;&gt;실제 쓰고 있는 파일&lt;/a&gt;은 약간 삽질을 해서 살짝 다르다.&lt;/p&gt;

&lt;h2 id=&quot;custom-domain-적용하기&quot;&gt;custom domain 적용하기&lt;/h2&gt;
&lt;p&gt;가지고 있는 도메인을 블로그 주소로 쓸 수도 있는데 CNAME 레코드를 바꾸면 된다. &lt;a href=&quot;https://help.github.com/articles/using-a-custom-domain-with-github-pages/&quot;&gt;Github Help&lt;/a&gt;에서 확인하면 된다. CNAME 설정을 하면 github repo에서 CNAME 파일을 자동 생성하기에 한번 &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt;로 끌어와야 한다.&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Dec 2016 22:43:03 +0900</pubDate>
        <link>http://blog.chan.je/programming/jekyll/2016/12/17/jekyll-with-github-pages.html</link>
        <guid isPermaLink="true">http://blog.chan.je/programming/jekyll/2016/12/17/jekyll-with-github-pages.html</guid>
        
        
        <category>programming</category>
        
        <category>jekyll</category>
        
      </item>
    
  </channel>
</rss>
